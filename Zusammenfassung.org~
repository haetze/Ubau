#+TITLE: Zusammenfassung "Ubau
#+LATEX_HEADER: \usepackage{ngerman}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{tikz-qtree}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usetikzlibrary{matrix}





* Weg zum generischen Compiler

- kontextfreie Sprache \rightarrow Parser \rightarrow Termalgebra \rightarrow generische Faltung \rightarrow Algebra

* Algebraische Modellierung

** Grundlagen

Seien A, B Mengen, f: A \to B, C \subseteq A, D \subseteq B, n > 0.

- \emptyset: leere Menge
- 1: {\epsilon}
- 2: {0,1}
- [n]: {1,..,n}
- \Delta^{n}_{A} =_def {(a_1,..,a_n) \in A^n | \forall 1 \leq i < n: a_i = a_{i+1} }
- f(C) =_def {f(a) | a \in C} = P(f)(C) 
- img(f) =_def f(A)
- f^{-1}(D) =_def {a \in A | f(a) \in D}
- ker(f) =_def {(a,a') \in A \times A | f(a) = f(a')}
- graph(f) =_def {(a, f(a)) \in A \times B | a \in A}
- f|_C: C \to B = c \to f(c)
- f[b/a]: A \to B = c \to if c = a then b else f(c)
- \chi: P(A) \to 2^A = C \to \lambda a. if a \in C then 1 else 0
- f ist surjektiv \Leftrightarrow_def img(f) = B
- f ist injektiv \Leftrightarrow_def ker(f) = \Delta^{2}_{A}
- f ist bijektiv \Leftrightarrow_def \exists g: B \to A: g . f = id_A \and f . g = id_B
- A \cong B \Leftrightarrow_def \exists f: A \to B und f ist bijektiv

** Mehrsortige Mengen

- Sei S eine Menge. Ein Tuple A = (A_s)_{s\[ \in \]S} ist dann eine S-indizierte(sortige) Menge.
- Seien A = (A_s)_{s\[ \in \]S} und B = (B_s)_{s\[ \in\]S} S-sortige Mengen. f: A \to B ist eine S-sortige Menge (f_s)_{s\[ \in \]S}, so dass \forall s \in S. f_s:A_s \to B_s.
- Seien n > 0. Eine n-stellige S-sortige Relation auf A ist eine S-sortige Menge R = (R_s)_{s\[ \in \]S} mit R_s \subseteq A_{s}^{n} f"ur alle  s\in S. 
- Im Fall n = 1, hei"st R S-sortige Teilmenge von A genannt.
- kartesisches Produkt einer I-sortigen Menge: \times_{i\[ \in \]I}A_i = {f:I \to \cup_{i\[ \in\]I}A_i | \forall i\in I : f(i) \in A_i}
- Gibt es eine Menge A mit A_i = A f"ur alle i\in I, dann stimmt \times_{i\[ \in \]I}A_i offenbar mit A^I "uberein. Im Fall I = [n] f"ur ein n > 1 schreibt man auch A_1 \times ... \times A_n anstelle von \times_{i\[ \in \]I} A_i und A^n snatelle von A^I.
- disjunkte Vereinigung: \uplus_{i\[ \in \]I}A_i = \cup_{i\[ \in \]I}(A_i \times {i})
- Im Fall I = [n] f"ur ein n > 1 schreibt man auch A_1 + .. + A_n anstelle von \uplus_{i\[ \in \]I}A_i.
- A^{+} =_def \cup_{n>0}A^n
- 1 =_def {\epsilon}
- A^{*} =_def 1 \cup A^{+}
- \cdot: A^{*} \times A^{*} \to A^{*} und \cdot: P(A^{*}) \times P(A^{*}) \to P(A^{*}) ist die Konkatenationen von Strings

** Produkte und Summen als universelle Konstruktionen
   
Sei I eine nichtleere Menge und A eine I-sortige Menge.
Das kartesische Produkt und die disjunkte Vereinigung eines Mengentupels A haben bestimmte *universelle Eigenschaften*.
- Jede Menge mit den universellen Eigenschaften des kartesischen Produkts nennt man /Produkt von A/
- Jede Menge mit den universellen Eigenschaften der disjunkten Vereinigung nennt man /Summe von A/

*** Produkt
Sei A = (A_i)_{i\[ \in \]I} ein Mengentuple, P eine Menge und \pi = (\pi_i: P \to A_i)_{i\[ \in \]I} ein Funktionstuple.
Das Paar (P, \pi) hei"st *Produkt von A*, wenn es f"ur alle Tuple (f_i: B \to A_i)_{i\[ \in \]I} genau eine Funktion f: B \to P gibt derart,
dass f"ur alle i\in I Folgendes gilt:

#+BEGIN_CENTER
			\pi_i . f = f_i				   
#+END_CENTER 

\pi_i hei"st i-te Projektion von P und g Produktextension oder Range-Tuple von f. g wird mit \langle f_i \rangle_{i\[ \in \]I} und im Falle
von I = [n], n > 1, auch mit \langle f_1,..,f_n \rangle bezeichnet.

Demnach gilt:

#+BEGIN_CENTER
(\forall i\in I : \pi_i . f = \pi_i \bigcirc g) \Rightarrow f = g

#+END_CENTER

\times_{i\[ \in \]I}A_i ist ein Produkt von A.

Die Projektion und Produktextensionen f"ur \times_{i\[ \in \]I}A_i sind wie folgt definiert:
- F"ur alle i\in I und f\in \times_{i\[ \in \]I}A_i, \pi_i(f) =_def f(i)
- F"ur alle (f_i: B \to A_i)_{i\[ \in \]I}, b\in B und i \in I, \langle f_i \rangle_{i\[ \in \]I}(b)(i) =_def f_i(b).

**** Satz 2.2 Produkte sind /bis auf Isomorphie/ eindeutig:
- Seien (P, \pi) und (P', \pi') Produkte von A. Dann sind P und P' isomorph.
- Seien (P, \pi) ein Produkt von A, P' eine Menge und h: P' \to P eine bijektive Abbildung. Dann ist (P', \pi') mit \pi' = (\pi . h)_{i\[ \in \]I} ebenfalls ein Produkt von A.


Die Funktion 
#+BEGIN_CENTER
\Pi_{i\[ \in \]I}f_i =_def \langle f_i . \pi_i \rangle : P \to P'  
#+END_CENTER
hei"st *Produkt von f*.

F"ur alle nichtleeren Mengen I,f: A \to B und n > 0,

#+BEGIN_CENTER
f^I =_def \Pi_{i\[ \in \]I} f_i,  \\
f_1 \times .. \times f_n =_def \Pi_{i\[ \in \][n]} f_i.
#+END_CENTER

F"ur alle f: A \to B, (f_i: B \to B_i)_{i\[ \in \]I}, (g_i: A_i \to B_i)_{i\[ \in \]I}, k\in I und (h_i: B_i \to A_i)_{i\[ \in \]I},
#+BEGIN_CENTER
\langle f_i \rangle_{i\[ \in \]I} . f = \langle f_i . f \rangle_{i\[ \in \]I}, \\
\pi_k . \Pi_{i\[ \in \]I}g_i = g_k \pi_k, \\
(\Pi_{i\[ \in \]I}h_i) . \langle f_i \rangle_{i\[ \in \]I} = \langle h_i . f_i \rangle_{i\[ \in \]I}. \\
#+END_CENTER

*** Summe 

Vom Produkt kommt man zur Summe, indem man alle Funktionspfeile umdreht:
Sei A = (A_i)_{i\[ \in \]I} ein Mengentuple, S eine Menge und \iota = (\iota_i: A_i \to S)_{i\[ \in \]I} ein Funktionstuple.
Das Paar (S, \iota) hei"st *Summe* oder *Coprodukt von A*, wenn es f"ur alle Tuple (f_i: A_i \to B)_{i\[ \in \]I} _genau_ eine Funktion
f: S \to B gibt mit 
#+BEGIN_CENTER
f . \iota_i = f_i
#+END_CENTER
f"ur alle i \in I. \\ 

\iota_i hei"st i-te Injektion von S und g Summenextension oder Domain Tuplung von f. g wird mit [f_i]_{i\[ \in \]I} und im Falle I = [n],
n>1, auch mit [f_1,..,f_n] bezeichnet. 

Demnach gilt:


#+BEGIN_CENTER
(\forall i\in I : f . \iota_i = g . \iota_i) \Rightarrow f = g
#+END_CENTER

**** Satz 2.3 Summen sind /bis auf Isomorphie/ eindeutig:
- Seien (S, \iota) und (S', \iota') Summen von A. Dann sind P und P' isomorph.
- Sei (S, \iota) eine Summe von A, S' eine Menge und h: S \to S' eine bijektive Abbildung. Dann ist (S', \iota') mit \iota' = (h . \iota_i)_{i\[ \in \]I} ebenfalls eine summe von A.

Sei (S, \iota) eine Summe von (A_i)_{i\[ \in \]I}, ein (S', \iota') eine Summe von (B_i)_{i\[ \in \]I} und f = (f_i: A_i \to B_i)_{i\[ \in \]I}
Die Funktion
#+BEGIN_CENTER
\amalg_{i\[ \in \]I}f_i =_def [\iota_{i}' . f_{i}]: S \to S' 
#+END_CENTER
hei"st Summe von f.


F"ur alle nichtleeren Mengen I,f: A \to B und n>0,
#+BEGIN_CENTER
f \times I =_def \amalg_{i\[ \in \]I} f, \\
f_1+..+f_n =_def \amalg_{i\[ \in \][n]} f_i, \\
f^{+} =_def \amalg_{n\[ \in \]\mathbb{N}} f^{[n]}, \\
f^{*} =_def 1 + f^{+} =_def id_1 + f^{+}. \\
#+END_CENTER

** Typen und Signaturen

Sei S eine Menge von - *Sorten* genannten - Symbolen.
Die Klasse T_p(S) der *polynomialen Typen "uber* S:
- S \subseteq T_p(S)
- Jede nichtleere Menge ist ein polynomialer Typ
- F"ur alle nichtleeren Mengen I und (e_i)_{i\in I}\in T_p(S)^I, \Pi_{i\in I} e_i, \amalg_{i\in I}e_i \in T_p(S) 


- Ein Typ der Form \Pi_{i\in I}e_i hei"st *I-stelliger Produkttyp* mit den *Faktoren* e_i, i\in I.
- Ein Typ der Form \amalg_{i\in I}e_i hei"st *I-stelliger Summentyp* mit den *Summanden* e_i, i\in I.

F"ur alle n>0, e_1,..,e_n, e\in T_p(S) und nichtleere Mengen I,
#+BEGIN_CENTER
e_1 \times .. \times e_n =_def \Pi_{i\[ \in \][n]}e_i, \\
e_1 + .. + e_n =_def \amalg_{i\[ \in \][n]}e_i, \\
e^I =_def \Pi_{i\[ \in \]I}e_i, \\
e^n =_def e^[n], \\
e^{+} =_def \amalg_{n>0}e^n, \\
e^{*} =_def 1 + e^{+}. \\
#+END_CENTER

Eine S-sortige Menge A wird wie folgt zur T_p(S)-sortigen Menge erweitert: F"ur alle nichtleeren Mengen I und (e_i)_{i\[ \in \]I}

#+BEGIN_CENTER
A_I = I, \\
A_{\Pi_{i\[ \in \]I}e_i} = \times_{i\[ \in \]I} A_{e_i}, \\
A_{\amalg_{i\[ \in \]I}e_i} = \uplus_{i\[ \in \]I} A_{e_i}.
#+END_CENTER

F"ur alle e \in T_p(S) und a \in A_e nennen wir e den Typen von a.

Eine S-sortige Funktion h: A \to B wird wie folgt zur T_p(S)-sortigen Menge f"ur alle nichtleeren Mengen I und (e_i)_{i \[ \in \]} 
\in T_p(S)^I.

#+BEGIN_CENTER
h_I = id_I, \\
h_{\Pi_{i \[ \in \]I}} = \Pi_{i\[ \in \]I}h_{e_i}, \\
h_{\amalg_{i \[ \in \]I}} = \amalg_{i\[ \in \]I}h_{e_i}.
#+END_CENTER


F"ur alle S-sortigen Mengen A, S-sortige Funktionen h: A \to B, n>0, nichtleeren Menge I und e_1,..e_n, e \in T_p(S) gilt Folgendes:
#+BEGIN_CENTER
A_{e_1 \times .. \times e_n} = A_{e_1} \times .. \times A_{e_n}, \\
A_{e_1 + .. + e_n} = A_{e_1} + .. + A_{e_n}, \\
A_{e^I} = A^I_e, \\
A_{e^n} = A^n_e, \\
A_{e^{+}} = A^{+}_e, \\
A_{e^{*}} = A^{*}_e, \\

h_{e_1 \times .. \times e_n} = h_{e_1} \times .. \times h_{e_n}, \\
h_{e_1 + .. + e_n} = h_{e_1} + .. + h_{e_n}, \\
h_{e^I} = h^I_e, \\
h_{e^n} = h^{[n]}_e, \\
h_{e^{+}} = h^{+}_e, \\
h_{e^{*}} = h^{*}_e.
#+END_CENTER



** Signaturen

- Eine *Signatur* \Sigma = (S, F) besteht aus einer Menge S von Sorten wie oben sowie einer Menge F typisierter Funktionssymbole f: e \to e' mit e, e' \in T_p(S), den Operationen von \Sigma.
- obs(\Sigma): die Menge der *beobachtbaren Typen* (observable types) von \Sigma, das sind alle nichtleeren Mengenm die in Typen von Operationen von \Sigma vorkommen.
- \forall f\in F : f: e \to e', dom(f) = e und ran(f) = e'
- \Sigma hei"st *Gentzen-Signatur*, falls \forall f \in F Mengen I, J existieren sodass dom(f) ein I-stelliger Produkttyp und ran(f) ein J-stelliger Summentyp ist.
- Konsrtuktoren dienen der Synthese von Elementen einer S-sortigen Menge, Destruktoren liefern Werkzeuge zu ihrer Analyse.
- Abstrakte Syntax einer CFG ist eine konstruktive Signaturen
- Parser, Interpreter und Compiler beruhen auf Automatenmodelle, die destruktive Signaturen interpretieren

*** Konstruktive Signaturen

**** Mon (\Rightarrow Unmarkierte bin"are B"aume) 
- S = {mon}
- F = {one: 1 \to mon, mul: mon \times mon \to mon}

**** Nat (\Rightarrow N)
- S = {nat}
- F = {zero: 1 \to nat, succ: nat \to nat}

**** Dyn(I, X) (\Rightarrow I \times X^{*})
- S = {list}
- F = {nil: I \to list. cons: X \times list \to list}

**** List(X) =_def Dyn(1, X) (\Rightarrow X^{*})

**** Bintree(X) (\Rightarrow bin"are B"aume endlicher Tiefe mit Knotenmarkierungen aus X)
- S = {btree}
- F = {empty: 1 \to btree, bjoin: btree \times X \times btree \to btree}


**** Tree(X) (\Rightarrow B"aume endlicher Tiefe und endlichen Knotenausgrads mit Knotenmarkierungen aus X)
- S = {tree, trees}
- F = {join: X \times trees \to tree, nil: 1 \to trees, cons: tree \times trees \to trees}

**** Reg(BL) (\Rightarrow regul"are Ausdr"ucke "uber BL)
- S = {reg}
- F = {par: reg \times reg \to reg, seq: reg \times reg \to reg, iter: reg \to reg, base: BL \to reg}

**** CCS(Act) (\Rightarrow Calculus of Communicating Systems)
- S = {proc}
- F = { pre: Act \times proc \to proc, cho: proc \times proc \to proc, par: proc \times proc \to proc, res: proc \times Act \to proc, rel: proc \times Act^{Act} \to proc}


*** Destruktive Signaturen

**** coNat (\Rightarrow N \cup {\infty})
- S = {nat}
- F = {pred: nat \to 1 + nat}

**** coList(X) (\Rightarrow X^{*} \cup X^{N} (coList(1) \cong coNat))
- S = {list, X \times list}
- F = {split: list \to 1+ X \times list, \pi_1: X \times list \to X, \pi_2: X \times list \to list}

**** Stream(X) =_def DAut(1, X) (\Rightarrow X^{N})
- S = {list}
- F = {head: list \to X, tail: list \to list}

**** coBintree(X) (\Rightarrow bin"are B"aume beliebiger Tiefe mit Knotenmarkierungen aus X)
- S = {btree, btree \times X \times btree}
- F = {split: btree \to 1 + btree \times X \times btree, \pi_1: btree \times X \times btree \to btree, \pi_2: btree \times X \times btree \to X, \pi_3: btree \times X \times btree \to btree}

**** Infbintree(X) (\Rightarrow bin"are B"aume unendlicher Tiefe mit Knotenmarkierungen aus X)
- S = {btree}
- F = {root: btree \to X, left, right:btree \to btree}

**** DAut(X,Y) (\Rightarrow Y^{X^{*}} = Verhalten det. Moore-Automaten mit Eingabemenge X und Ausgabemenge Y)
- S = {state, state^X}
- F = {\delta: state \to state^X, \beta: state \to Y} \cup {\pi_x: state^X \to state | x\in X}

**** Acc(X) =_def DAut(X,2) (\Rightarrow P(X^{*}) = Wortsprache "uber X)

**** Proctree(Act) (\Rightarrow Prozessb"aume, deren Kanten mit Aktionen markiert sind)
- S = {tree} \cup {(Act \times tree)^n | n > 0}
- F = {\delta: tree \to (Act \times tree)^{*}} \cup {\pi_n: (Act \times tree)^n \to Act \times tree | n > 0} \cup {\pi_1: Act \times tree \to Act, \pi_2: Act \times tree \to tree}

** Algebren

Sei \Sigma = (S, F) eine Signatur. Eine \Sigma- *Algebra* A = (A, Op) besteht aus einer S-sortigen Menge A und einer F-sortigen Menge
#+BEGIN_CENTER
Op = (f^A: A_e \to A_{e'})_{f: e\[ \to \]e'\[ \in \]F}
#+END_CENTER 
von Funktionen, den Operationen von A.
F"ur alle s \in S hei"st A_s Tr"agermenge (carrier set) oder Interpretation von s in A. F"ur alle f: e \to e' \in F hei"st f^A : A_e \to A_{e'} Interpreation von f in A.

Seien A, B \Sigma-Algebren. Eine S-sortige Funktion h: A \to B hei"st \Sigma-Homomorphismus, wenn f"ur alle f: e \to e' \in F
#+BEGIN_CENTER
h_{e'} \bigcirc f^A = f^B \bigcirc h_e
#+END_CENTER
gilt. Ist h bijektiv, dann hei"st h \Sigma-Isomorphismus und A und B sind \Sigma-isomorph. h induziert die Bildalgebra h(A):
- F"ur alle e\in T_p(S), h(A)_e =_def h_e(A_e)
- F"ur alle f: e\to e' \in F und a \in A_e, f^{h(A)}(h(a)) =_def f^B(h(a))

*** Beispiele

**** Nat-Algebra
- zero^N: 1 \to N, succ^N: N \to N
- zreo^N(\epsilon) = 0, succ^N(n) = n + 1

**** Word(X) (eine Mon-Algebra)
- one^{Word(X)}: 1 \to X^{*}, mul^{Word(X)}: X^{*} \times X^{*} \to X^{*}
- one^{Word(X)}(\epsilon) = \epsilon, mult^{Word(X)}(u, v) = uv 


** Terme und Coterme
*** Terme 
Sei \Sigma = (S,C) eine konstruktive Signatur, X = \cup obs(\Sigma) und V eine S-sortige Menge von "Variablen".
Die Menge CT_\Sigma(V) der \Sigma-Terme "uber V ist die gr"o"ste (S \cup obs(\Sigma))-sortige Menge M  det. B"aume "uber (X, C \cup X \cup V)
mit folgenden Eigenschaften:

- F"ur alle B \in obs(\Sigma), M_B = B (1)
- F"ur alle s \in S und t \in M_s ist t \in V_s (2) oder gibt es c: \Pi_{i\[ \in \]I}s_i \to s \in C und (t_i)_{i\[ \in \]I} \in \times_{i\[ \in \]I}M_{s_i} mit t = c{i \to t_i | i \in I} (3)




**** Fall 
\\ 
\Tree [.b ] \\
b \in B, 
B \in obs(\Sigma) \\

**** Fall
\\
\Tree [.x ] \\
x ist von s, s \in S, x \in V_s 

**** Fall
\\
\Tree [.c \ldots \\
          \ldots \\
	  \ldots \\
	  [.i s_i ]
	  \ldots \\ ]

c: \Pi_{i\[ \in \]I} s_i \to s \in C


- Die Elemente von CT_\Sigma =_def CT_\Sigma(\lambda x. \emptyset) hei"sen \Sigma-Grundterme.

*** Coterme 
Sei \Sigma = (S, D) eine destruktive Signatur und V eine S-sortige Menge von Farbe oder Covariablen.

Die Menge DT_\Sigma(V) der \Sigma-Coterme "uber V ist die gr"o"ste Menge (S \cup obs(\Sigma))-sortige Menge M det. B"aume "uber (D \cup {!}, X \cup V) mit (1) und folgender Eigenschaft
- F"ur alle s \in S, t \in M_s, d: s \to \amalg_{i\[ \in \]I}s_i \in D gibt es x \in V_s, i_d \in I und t_d \in M_{s_i} mit t =x{d \to i{! \to t_d} | d: s \to e \in D}

**** Fall
\\ 
\Tree [.b ] \\
b \in B, 
B \in obs(\Sigma) \\

**** Fall
\\
\Tree [.x \ldots \\
          \ldots \\
	  \ldots \\
	  [.i s_i ]
	  \ldots \\ ]

x \in V_s
c: s \to \amalg_{i\[ \in \]I} s_i  \in D

Ist I einelementig, dann stimmt \amalg_{i\[ \in \]I}s_i mit s_i "uberein, so dass die mit ! markierte Kante entf"allt.

** /Bool/-Algebra 
Die Menge 2 ist Tr"agermenge der REG(BL)-Algebra /Bool/.

F"ur alle x, y \in 2 und B \in BL \ 1:
#+BEGIN_CENTER
par^{Bool}(x, y) = max{x,y}, \\
seq^{Bool}(x, y) = x*y, \\
iter^{Bool}(x) = 1, \\
base^{Bool}(1) = 1, \\
bas^{Bool}(B) = 0. \\
#+END_CENTER


** Termfaltung
- \Sigma = (S, C)
- V eine S-sortige Menge 
- A = (A, Op) eine \Sigma-Algebra
- g: V \to A eine *Variablenbelegung* (/valuation/)
- g^{*} intuitiv definiert.


Offenbar h"angt die Einschr"ankung von g* auf Grundterme nicht von g ab. Sie wird *Termfaltung* genannt und mit fold^A bezeichnet.

Folglich ist fold^A der einzige \Sigma-Homomorphismus von T_\Sigma nach A

** Zustandsentfaltung
- \Sigma = (S, D) 
- V eine S-sortige Menge 
- A = (A, Op) eine \Sigma-Algebra
- g: A \to V eine F"arbung
- g^{#} intuitiv definiert

Offenbar h"angt die Einschr"ankung von g^{#} auf Grundterme nicht von g ab. Sie wird *Zustandsentfaltung* genannt und mit unfold^A bezeichnet.
 
* Rechnen mit Algebren 

** Unteralgebra
Bez"uglich der Operationen geschlossene Untermenge.

** Substitution 
\sigma^{*}: T_\Sigma(V) \to T_\Sigma(V)

** Term"aquivalenz 
\forall t,t' \in E, g \in A^V : g^{*}(t) = g^{*}(t')


** Normalformen 
Werden f"ur jede Signatur selbst definiert und k"onnen durch das verwenden definierter Gleichungen erzeugt Werden

* Kontextfreie Grammatiken (CFGs)

** Definition 
G = (S, BS, R) mit 

- einer endlichen Menge S von *Sorten*, die auch Nichtterminale oder Variablen genannt werden 
- BS, eine Menge nichtleerer Basismengen 
- eine endliche Menge R von Regeln s \to w mit s \in S und \\ w \in (S \cup BS)^{*} \ {s} 

** Die JavaLight Grammatik
*** R
- Commands \to Command Commands | Command 
- Command \to {Commands} | String = Sum; | \\ if Disjunct Command else Command | \\ if Disjunct Command | while Disjunct Command
- Sum \to Sum + Prod | Sum - Prod | Prod 
- Prod \to Prod * Factor | Prod/Factor | Factor
- Factor \to Z | String | (Sum)
- Disjunct \to Conjunct || Disjunct | Conjunct
- Conjunct \to Literal && Conjunct | Literal
- Literal \to !Literal | Sum Rel Sum | 2 | (Disjunct)

*** BS
- String (alle Zeichenfolgen au"ser Elementen anderer Basismengen von JavaLight)
- Z
- Rel (nicht n"aher spezifizierter bin"arer Relationen auf Z

** Beispiel Programm

fact = 1; while x > 1 {fact = fact*x; x = x-1;}

** Linksrekursive Grammatiken

Sei G = (S, BS, R) und X = \cup BS. 

X ist die Menge der Eingabesymbole, die Compiler f"ur G verarbeiten m"ussen.

*** Einschub Ableitungsrelation
\to_G = {(vsw, v\alpha w), s \to \alpha \in R, v,w \in (S \cup BS)^{*}}.


*** Definition
- G hei"st *linksrekursiv*, falls es eine *linkrekursive* Ableitung s \to_G sv gibt. 
- G hei"st LL-kompilierbar, falls es eine partielle Ordnung \leq auf S gibt mit s' \leq s f"ur alle Ableitungen sv \to_G s'w
**** Umgangssprachlich
Man hat eine Regel, sodass die Sorte auf der linken Seite auf der rechten Seite ganz links vorkommt.

*** Beispiel
Z.B. REG ist LL-kompilierbar, JavaLight jedoch _nicht_. 

*** Verfahren zur Elemenierung von Linksrekursion
Sei G = (S, BS, R) und S = {s_1,..,s_n}.

F"uhre f"ur alle 1 \leq i \leq n die beiden folgenden Schritte in der angegebenen Reihenfolge durch:

- F"ur alle 1 \leq j \leq i und Regelpaare (s_i \to s_{j}v, s_j \to w) ersetze dir Regel s_i \to s_{j}v durch s_i \to wv
- Falls vorhanden, streiche die Regel s_i \to s_i
- F"ur alle Regelpaare (s_i \to v, s_i \to s_{i}w) mit \notin {s_i} \times (S \cup BS)^{*} ersetze die beiden Regeln durch die drei neuen Regeln s_i \to vs'_i, s'_i \to ws'_i und s'_i \to \epsilon


**** Beispiel JavaLight

- Commands \to Command Commands | Command 
- Command \to {Commands} | String = Sum; | \\ if Disjunct Command else Command | \\ if Disjunct Command | while Disjunct Command
- Sum \to Prod Sumsect
- Sumsect \to + Prod Sumsect | - Prod Sumsect | \epsilon  
- Prod \to Factor Prodsect
- Prodsect \to * Factor Prodsect | / Factor Prodsect | \epsilon
- Factor \to Z | String | (Sum)
- Disjunct \to Conjunct || Disjunct | Conjunct
- Conjunct \to Literal && Conjunct | Literal
- Literal \to !Literal | Sum Rel Sum | 2 | (Disjunct)



** Abstrakte Syntax 

Sei G = (S, BS, R) eine CFG.

Die folgende Funktion typ: (S \cup BS)^{*} \to T_p(S) streicht alle Elemente von Z(G) aus W"ortern "uber S \cup BS und "uberf"uhrt diese
in die durch sie bezeichneten Produkttypen:

- typ(\epsilon) = 1
- F"ur alle s \in S \cup BS \ Z(G) und w \in (S \cup BS)^{*}, typ(sw) = s \times typ(w)
- F"ur alle x \in Z und w \in (S \cup BS)^{*}, typ(xw) = typ(w)

Dann ist \Sigma(G) = (S, BS, {f_{s \to w}:typ(w) \to s | s \to w \in R})


\Sigma(G)-Grundterme werden Syntaxb"aume von G genannt.

*** Beispiel JavaLight
- S = {Commands, Command, Sum, Prod, Factor, Disjunct, Conjunct, Literal}
- \Iota = {Z, String, Rel, 2}
- F = { \\ seq: Command \times Commands \to Commands, \\ embed: Command \to Commands, \\ block: Commands \to Command, \\ assign: String \times Sum \to Command, \\ cond: Disjunct \times Command \times Command \to Command, \\ cond1, loop: Disjunct \times Command \to Command, \\ _sum_: Prod \to Sum, \\ _plus_, _minus_: Sum \times Prod \to Sum, \\ _prod_: Factor \to Prod, \\ _times_, _div_: Prod \times Factor \to Prod, \\ embedI: Z \to Factor, \\ var: String \to Factor, \\ encloseS: Sum \to Factor, \\ disjunct: Conjunct \times Disjunct \to Disjunct, \\ embedC: Conjunct \to Disjunct, \\ conjunct: Literal \times Conjunct \to Conjunct, \\ embedL: Literal \to Conjunct, \\ not: Literal \to Literal, \\ atom: Rel \times Sum \times Sum \to Literal, \\ embedB: 2 \to Literal, \\ encloseD: Disjunct \to Literal}


*** JavaLight' (entlinksrekursiv)
- wird um die Sorten Sumsect und Prodsect erweitert und um die Konstruktoren 
- sum: Prod \times Sumsect \to Sum, \\ plus, minus: Prod \times Sumsect \to Sumsect, \\ nilS: 1 \to Sumsect, \\ prod: Factor \times Prodsect \to Prod, \\ times, div: Factor \times Prodsect \to Prodsect, \\ nilP: 1 \to Prodsect

*** Syntaxbaum Beispiel
Beispiel Programm:
- fact = 1; while x > 1 {fact = fact*x; x = x-1;}

\begin{tikzpicture}[grow'=right, level distance=0.6in]
\Tree [.Seq 
            [.Assign fact 
	                  [.Sum 
			        [.Prod 
				       [.EmbedI 1 ] 
				       NilP ]
				NilS ]]
	    [.Embed 
	            [.Loop
		           [.EmbedC 
			            [.EmbedL 
				             [.Atom > 
			                            [.Sum 
						          [.Prod 
							         [.Var x ]
								 [.NilP ]]
							  [.NilS ]]
						    [.Sum 
						          [.Prod 
							         [.EmbedI 1 ]
								 [.NilP ]]
							  [.NilS ]]]]]
		    [.Block 
		            [.Seq 
		                  [.Assign
				           fact 
					   [.Sum 
					         [.Prod 
						        [.Var fact ]
							[.Times 
							        [.Var x ]
								[.NilP ]]]
						 [.NilS ]]]
				  [.Embed 
				          [.Assign
					           x
						   [.Sum 
						         [.Prod
							        [.Var x ]
								[.NilP ]]
							 [.Minus 
							         [.Prod
								        [.EmbedI 1 ]
									[.NilP ]]
								 [.NilS ]]]]]]]]]]
\end{tikzpicture}

** Definition derec(G)

- F"ur alle s \in S \cup BS \ Z(G), derec(G)_s = T_{\Sigma(G'),s}
- F"ur alle s \in S \ recs(S) und s \to v \in R und t \in T_{\Sigma(G'),typ(v)}, f_{s \to v}^{derec(G)}(t) = f_{s \to v}(t)
- F"ur alle s \to v \in nonrecs(R), s \to sw \in R, t \in T_{\Sigma(G'),typ(v)}, t' \in T_{\Sigma(G'),s'} und u \in T_{\Sigma(G'), typ(w)} \\ f_{s \to v}^{derec(G)}(t) = f_{s \to vs'}(t, f_{s' \to \epsilon}) \\ f_{s \to sw}^{derec(G)}(f_{s \to vs'}(t,t'),u) = f_{s \to vs'}(t, f_{s' \to ws'}(u, t')) 

Mit derec(G) kann man eine Syntaxbaum in G in einen Syntaxbaum der nicht linksrekursiven Grammatik G' umwandeln


** Wort- und Ableitungsbaumalgebra
Neben T_{\Sigma(g)} lassen sich auch die Menge der W"orter "uber X und die Menge der Ableitungsb"aume von G zu \Sigma(G)-Algebren erweitern.

*** Wortalgebra
fold^{Word(G)} bildet Terme auf die entsprechenden W"orter der Sprache. 

*** Ableitungsbaumalgebra
Bildet auf einen Baum ab, der auch die W"orter darstellt (inklusive der Terminale aus Z(G))

** Zustandsmodell von JavaLight
- Sei Store = String \to Z (Variablenbelegung)

- Wir bilden eine \Sigma(JavaLight)-Algebra

*** Sorten
- A_Commands = A_Command = Store \to Store 
- A_Sum = A_Factor = A_Prod = Store \to Z 
- A_Disjunkt = A_Conjunct = A_Literal = Store \to 2

*** Operationen
F"ur alle f,g: Store \to Store, x \in Store, e: Store \in Z, st \in Store \\ und p: Store \to 2.

#+BEGIN_CENTER
seq^A(f, g) = g . f, \\
embed^A(f) = block^A(f) = f, \\
assign^A(x,e)(st) = st[e(st)/x], \\
cond^A(p, f, g)(st) = if p(st) then f(st) else g(st), \\
cond1^A(p, f)(st) = if p(st) then f(st) else st, \\
loop^A(p, f)(st) = if p(st) then loop(p, f)(f(st)) else st. \\
#+END_CENTER

F"ur alle f,g: Store \to Z, x \in String und i \in Z

#+BEGIN_CENTER
sum^A(f) = prod^A(f) = f, \\
plus^A(f, g) = list^Store(+)(f, g) = \lambda st. f(st) + g(st), \\
minus^A(f, g) = list^Store(-)(f, g) = \lambda st. f(st) - g(st), \\
times^A(f, g) = list^Store(*)(f, g) = \lambda st. f(st) * g(st), \\
div^A(f, g) = list^Store(/)(f, g) = \lambda st. f(st) / g(st), \\
embedI(i)(st) = i, \\
var(x)(st) = st(x), \\
encloseS^A(f) = f.
#+END_CENTER

F"ur alle f, g: Store \to 2, rel \in Rel, e, e': Store \to Z, b \in 2,

#+BEGIN_CENTER
disjunct^A(f, g) = lift^Store(\lor)(f,g) = \lambda st. f(st) \lor g(st), \\
conjunct^A(f, g) = lift^Store(\land)(f,g) = \lambda st. f(st) \land g(st), \\
atom^A(rel, e, e') = lift^Store(rel)(e,e') = \lambda st. e(st) rel e'(st), \\
embedC^A(f) = embedL^A(f) = encloseD^A(f) = f, \\
not^A(f) = \not . f, \\
embedB^A(b)(st) = b.
#+END_CENTER

* Parser und Compiler f"ur CFGs

<<diagram_1>>
T_{\Sigma(G)} \xrightarrow{fold^Z} Z \xrightarrow{evaluate} Mach \\
T_{\Sigma(G)} \xrightarrow{fold^S} S \xrightarrow{encode} Mach

- S: Sem, die ebenfalls als \Sigma(G)-Algebra gegebene Semantik der Quellsprache L(G)
- Mach, eine in der Regel unabh"angig von \Sigma(G) definiertes Modell der Zielsprache, meist in der Form einer abstrakten Maschine 
- evaluate, ein Interpreter der die Zielsprache in der abstrakten Maschine Mach ausf"uhrt
- encode, eine Funktion, die Sem auf Mach abbildet und die gew"unschte Arbeitsweise des Compilers auf der semantischen Ebene ausf"uhrt

** Definition Parser

Parser f"ur G: eine S-sortige Funktion
#+BEGIN_CENTER
parse_G: X^{*} \to M(T_{\Sigma(G)})
#+END_CENTER
die entweder einen Synatxbaum f"ur das Eingabewort erzeugt oder eine Fehlermeldung zur"uck gibt. (Syntaxbaum und Fehlermeldung sind abh"anig von der Monade M)

** Funktoren und Monaden

*** Definition Kategorie
Eine Kategorie K besteht aus
- einer - ebenfalls mit K bezeichneten- Klasse von K-Objekten 
- f"ur alle A.B \in K einer Menge K(A,B) von K-Morphismen
- einer assoziativen Komposition 
#+BEGIN_CENTER 
. : K(A,B) \times K(B, C) \to K(A,C) 
\\ (f,g) \to g . f 
#+END_CENTER 
- einer Identit"at id_A \in K(A,A), die bez"uglich . neutral ist

*** Defintion Funktor 
Seien K und L Kategorien. Ein Funktor F: K \to L ist eine Funktion(m"ussen das wirklich Funktionen sein?), die jedem K-Objekt ein L-Objekt und jedem 
K-Morphismus f: A \to B eine L-Morphismus F(f): F(A) \to F(B)  zuordnet, sowie folgende Gleichungen erf"ullt:
- F"ur alle K-Objekte A, F(id_A) = id_{F(A)}
- F"ur alle K-Morphismen f: A \to B und g: B \to C, F(g . f) = F(g) . F(f)
- Funktoren lassen sich wie Funktionen zu neuen Funktoren komponieren. 

**** Beispiele
- Sei B \in L. Der konstante Funktor const(B): K \to L ordnet jedem K-Objekt B und jedem K-Morphismus die Identit"at auf B zu
- Der Diagonalfunktor \Delta_K: K \to K^2 ordnet jedem K-Objekt A das Paar (A,A) und jedem K-Morphismus f das Paar (f,f) zu
- Produktfunktor, _ \times _ : Set^2 \to Set ordnet jedem Mengenpaar (A,B) die Menge A \times B und jedem Funktionspaar (f: A \to B, g: C \to D) die Funktion f \times g =_def \lambda(a,c).(f(a),g(c)) zu
- Ausnahmefunktor _ + E : Set \to Set ordnet jeder Menge A die Menge A + E zu und jeder Funktion f: A \to B die Funktion 
#+BEGIN_CENTER
f + E: A + E \to B + E \\
(a, 1) \to (f(a), 1) \\
(e, 2) \to (e, 2) \\
#+END_CENTER

*** Definition Nat"urliche Transformation 
Seien F, G: K \to L Funktoren. Eine nat"urliche Transformation \tau: F \to G ordnet jedem K-Objekt A einen L-Morphismus \tau_A: F(A) 
\to G(A) derart, dass f"ur alle K-Morphismen f:A \to B das gilt:

- F(A) \to^{\tau_A} G(A)
- F(A) \to^{F(f)} F(B)
- F(B) \to^{\tau_B} G(B)
- G(A) \to^{G(f)} G(B)

*** Definition Monade 
Ein Funktor M: K \to K hei"st Monade, wenn es zwei nat"urliche Transformationen \eta: Id_K \to M (Einheit) und \mu: M . M \to M 
(Multiplikation) gibt, die f"ur alle A \in K folgednes gelten lassen:

- Seite 154 Folienscript

**** Beispiel Ausnahmefunktor

- \eta_A: A \to A + E \\ \eta_A(a) = (a,1)
- \mu_A: (A + E) + E \\ \mu_A( ((a,1),1) ) = (a,1) \\ \mu_A( ((e,2),1) ) = (e,2) \\ \mu_A( (e,2) ) = (e,2)

**** Der bind-Operator
Seien A und B Mengen

#+BEGIN_CENTER
>>=: M(A) \times (A \to M(B)) \to M(B) \\
(>>= f) = \mu_B . M(f)
#+END_CENTER

**** Intuitive Erkl"arung einer Monade 

Intuitiv stellt man sich ein monadisches Object m \in M(A) als Berechnung vor, die eine -evt leere- Menge von Werten in A erzeugt. 
Ein Ausdruck der Form />>= f/ wird dann wie folgt ausgewertet: Die von m berechneten Werte a \in A werden als Eingabe an die Berechnung
von f "ubergeben und von f(a) verarbeitet.

**** Es ergeben sich ein paar Eigenschaften
- m >>= \eta_A = m
- \eta_A(a) >>= f = f(a)
- (m >>= f) >>= g = m >>= \lambda a. f(a) >>= g
- M(h)(m) = m >>= \mu_B . h
- \eta_A(m') = m' >>= id_M(A)

**** Plusmonade
Plusmonaden haben zus"atzlich eine parallele *Komposition*
#+BEGIN_CENTER
\oplus: M \times M =_def _ \times _ . \Delta . M \to M
#+END_CENTER

*** Compilermonade
Sei M: Set^S \to Set^S eine Monade mit der Einheit \eta, bind-Operator >>= und paralleler Komposition \oplus, set: M \to P eine 
weitere nat"urliche Transformation und 
#+BEGIN_CENTER
E = {m \in M(A) | set_A(m) = \emptyset, A \in Set^S}
#+END_CENTER
"Menge der Ausnahmewerte" \\

M hei"st Compilermonade, wenn f"ur alle Mengen A und B, m, m', m'' \in M(A), e \in E, f: A \to M(B), h: A \to B und a \in A Folgendes gilt:
#+BEGIN_CENTER
(m \oplus m') \oplus m'' = m \oplus (m' \oplus m'') \\
M(h)(e) = e \\
M(h)(m \oplus m') = M(h)(m) \oplus M(h)(m') \\
set_A(m \oplus m') = set_A(m) \cup set_A(m') \\
set_A(\eta_A(a)) = {a} \\
set_B(m >>= f) = \cup{set_B(f(a)) | a \in set_A(m)}
#+END_CENTER

*** Monadenbasierte Parser und Compiler 

- Sei G = (S, BS, R) LL-kompilierbar 
- G' die daraus gebildete nicht-linksrekursive Grammatik 
- X = \cup BS
- \Sigma(G) = (S, F)
- M : Set^S \to Set^S

Ein Compiler f"ur G in die als \Sigma(G)-Algebra A formulierte Zielsprache einen Parser f"ur G mit der Faltung in A der vom Parser 
erzeugten Syntaxbaume komponieren.
Daher passen wir die "Ubersetzungsfunktion ein bisschen an:

<<compile_funktion>>
#+BEGIN_CENTER
compile_G^A = X^{*} \to^{compile_G^{T_{\Sigma(G)}}} M(T_{\Sigma(G)}) \to^{M(fold_A)} M(A)
#+END_CENTER

Ist G linksrekursiv terminiert das evt nicht, daher fordern wir in dem Fall:

#+BEGIN_CENTER
compile_G^A = X^{*} \to^{parse_G^{T_{\Sigma(G)}}} M(T_{\Sigma(G')}) \to^{M(fold_{derec(A))}} M(A)
#+END_CENTER

Es gilt die Vertr"aglichkeit mit \Sigma-Homomorphismen (eingebettet in die Monade nat"urlich)

Gilt [[compile_funktion]], dann folgt aus [[diagram_1]]: 
- X^{*} \to^{compile_G^A} M(A) \to^{M(evaluate)} M(Mach) \\
- X^{*} \to^{compile_G^S} M(S) \to^{M(encode)} M(Mach)
 

* LL Kompiler

Das erste L steht f"ur die Verarbeitung von *Links* nach Rechts. Das zweite L steht f"ur das bilden einer *Linksableitung*.

- G = (S, BS, R)
- G' = (S', BS, R')
- X = \cup BS 
- M eine Compilermonade
- errmsg: X^{*} \to E
- A = (A, Op) eine \Sigma(G)-Algebra
- /compile_G/ hei"st LL-Compiler, wenn (compile^A_{G,s}: X^{*} \to M(A_s))_{s\[ \in \]S} 
- compile_{G,s}^A(w) = trans_s^A(w) >>= \lambda(a, w). if w = \epsilon then \eta_A(a) else errmsg(w), wobei f"ur alle s \in S' \cup BS \\ trans_s^A : X^{*} \to M(A_s \times X^{*}) wie folgt definiert ist:

** Fall 1: s \in BS. F"ur alle x \in X und w \in X^{*}

#+BEGIN_CENTER
trans_s^A(xw) = if x \in s then \eta_{A \times X^{*}}(x,w) else errmsg(xw) \\
trans_s^A(\epsilon) = errmsg(\epsilon)
#+END_CENTER

** Fall 2: s \in S'. F"ur alle w \in X^{*},

#+BEGIN_CENTER
trans_s^A(w) = \oplus_{r=(s \to e)\in R} try_r^A(w)
#+END_CENTER


F"ur alle r = (s \to (e_1,..,e_n))\in R' und w \in X^{*},
#+BEGIN_CENTER
try_r^A(w) = trans_{e_1}^A >>= \lambda(a_1,w_1). ...... trans_{e_n}^A(w_{n-1}) >>= \lambda(a_n, w_n).\eta_{A \times X^{*}}(f_r^{derec(A)}(a_{i_1},..,a_{i_k}),w_n)
#+END_CENTER
wobei {i_1,..,i_k} = {1 \leq i \leq n | e_i \in S' \cup BS \ Z(G)} \\


*_Ein Beispiel ist auf Seite 170 im Folienscript. Das JavaLight+ Beispiel beginnt auf Seite 172_* 

* LR Kompiler

- Konstruieren *Rechtsreduktion* (\Rightarrow Rechtsableitung)
- Entspricht dem /mit dem Bl"attern beginnender Aufbau eines Syntaxbaumes/, daher *Bottom-up* Compiler
- LR-Compiler sind auf LR(/k/)-Grammatiken beschr"ankt
- Sei G = (S, BS, R) eine CFG und X = \cup BS
- Vorraussetzung: /start/ \in S und /start/ kommt in keiner Regel auf der rechten Seite vor

** LR(k) Grammatiken 
Eine Grammatik ist eine LR(k) Grammatik, wenn das vorrauslesen von k Symbolen reicht, damit man entscheiden kann ob ein weiteres 
Zeichen gelesen werden muss oder eine Reduktion durchgef"uhrt werden muss (und wenn ja welche). Au"serdem m"ussen die BS disjunkt sein.

*** Definition first- und follow- Wormengen
Sei k > 0, \alpha \in (S \cup BS)^{*} und s \in S
#+BEGIN_CENTER
first_k(\alpha) = {\beta \in BS^{k} | \exists \gamma \in BS^{*}: \alpha \to^{*}_G \beta\gamma} \cup {\beta \in BS^{<k} | \alpha \to^{*}_G \beta}
follow_k(s) = {\beta \in BS^{k} | \exists \alpha, \gamma \in BS^{*}: start \to^{*}_G \alpha s \beta\gamma} \cup {\alpha \in BS^{<k} | start \to^{*}_G \alpha s \beta}
first(\alpha) = first_1(\alpha)
follow(s) = follow_1(s)
#+END_CENTER  

Sei recog_1 ein Erkenner f"ur die Sprache (Definition auf Seite 190)
193
